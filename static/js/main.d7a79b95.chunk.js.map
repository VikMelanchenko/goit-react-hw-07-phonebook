{"version":3,"sources":["components/ContactsForms/ContactsForm.module.scss","redux/contacts-selectors.js","redux/contacts-actions.js","redux/contacts-operations.js","redux/contacts-reducer.js","components/ContactsForms/ContactsForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","components/Container/Container.jsx","redux/store.js","index.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","number","contact","complited","post","id","delete","createReducer","_","payload","loading","combineReducers","ContactsForms","onSubmit","useState","setName","setNumber","useDispatch","useSelector","handleChange","event","target","value","onReset","className","s","panel__container","form__item","e","preventDefault","toast","info","find","contactsOperations","input__item","type","placeholder","onChange","button__submit","Filter","filter__item","connect","contactsSelectors","fetchContacts","useEffect","length","map","onClick","onRemoveContact","App","console","log","position","autoClose","Container","children","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7a79b95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ContactsForm_Container__1dhkF\",\"panel__container\":\"ContactsForm_panel__container__3g1fS\",\"form__item\":\"ContactsForm_form__item__MrJE0\",\"filter__item\":\"ContactsForm_filter__item__TD8lh\",\"input__item\":\"ContactsForm_input__item__1q26m\",\"button__submit\":\"ContactsForm_button__submit__1vcLm\",\"contact__list\":\"ContactsForm_contact__list__3rhrb\",\"contact__item\":\"ContactsForm_contact__item__2wzlo\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\n\n// составной (композитный) селектор\n// export const getVisibleContacts = (state) => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n\n// мемоизация\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport default {\n  getContacts,\n  getVisibleContacts,\n  getFilter,\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const removeContactRequest = createAction(\n  'contacts/removeContactRequest'\n);\nexport const removeContactSuccess = createAction(\n  'contacts/removeContactSuccess'\n);\nexport const removeContactError = createAction('contacts/removeContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contacts-actions';\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(fetchContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\n    .catch((error) => dispatch(fetchContactError(error)));\n};\n\nconst addContact = (name, number) => (dispatch) => {\n  const contact = {\n    name,\n    number,\n    complited: false,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch((error) => dispatch(addContactError(error)));\n};\n\nconst removeContact = (id) => (dispatch) => {\n  dispatch(removeContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(removeContactSuccess(id)))\n    .catch((error) => dispatch(removeContactError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  removeContact,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  changeFilter,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contacts-actions';\n\n// items reducer\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (contacts, { payload }) => [...contacts, payload],\n  [removeContactSuccess]: (contacts, { payload }) =>\n    contacts.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [removeContactRequest]: () => true,\n  [removeContactSuccess]: () => false,\n  [removeContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import s from './ContactsForm.module.scss';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { getContacts } from '../../redux/contacts-selectors';\n\nimport { contactsOperations } from '../../redux';\n\nexport default function ContactsForms({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (name === '') {\n      return toast.info('Please input name');\n    }\n\n    // check unique contact name\n    if (contacts.find((contact) => contact.name === name)) {\n      return toast.error(`${name} is already in contacts`);\n    }\n\n    dispatch(contactsOperations.addContact(name, number));\n    onSubmit(name, number);\n    onReset();\n  };\n\n  const onReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.panel__container}>\n      <h1>Phonebook</h1>\n      <form className={s.form__item} onSubmit={handleSubmit}>\n        <h2>Add a new contact</h2>\n        <label>\n          Name\n          <input\n            className={s.input__item}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"enter contact name\"\n            onChange={handleChange}\n          ></input>\n        </label>\n        <label>\n          Pnone number\n          <input\n            className={s.input__item}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"enter phone number\"\n            onChange={handleChange}\n          ></input>\n        </label>\n        <button className={s.button__submit} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: (name, number) =>\n//     dispatch(contactsActions.addContact(name, number)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactsForms);\n","// import PropTypes from 'prop-types';\nimport { changeFilter } from '../../redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts-selectors';\nimport s from '../ContactsForms/ContactsForm.module.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label>\n        <h1>Find contacts by name</h1>\n        <input\n          className={s.filter__item}\n          type=\"text\"\n          value={value}\n          onChange={(event) => dispatch(changeFilter(event.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   filter: PropTypes.string,\n// };\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (event) =>\n//     dispatch(contactActions.changeFilter(event.target.value)),\n// });\n","import s from '../ContactsForms/ContactsForm.module.scss';\nimport { useDispatch, connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux';\nimport { useEffect } from 'react';\nimport Filter from '../Filter/Filter';\n\n// список добавленных контактов и удаление при клике на кнопку\nconst ContactList = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const onRemoveContact = (id) =>\n    dispatch(contactsOperations.removeContact(id));\n\n  if (contacts.length === 0) return null;\n\n  return (\n    <div className={s.panel__container}>\n      <Filter />\n      <ul className={s.form__item}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={s.input__item}>\n            <span>\n              {name}: {number}\n            </span>\n\n            <button\n              className={s.button__submit}\n              onClick={() => onRemoveContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst mapStateToProps = (contacts) => {\n  return {\n    contacts: contactsSelectors.getVisibleContacts(contacts),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","// import { useState } from 'react';\n\nimport ContactsForms from './components/ContactsForms/ContactsForm';\n\nimport ContactList from './components/ContactList/ContactList';\n\nimport { ToastContainer } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\n// import useLocalStorage from './hooks/useLocalStorage';\n\nexport default function App() {\n  // const [contacts, setContacts] = useLocalStorage('contacts', []);\n  // const [filter, setFilter] = useState('');\n\n  // form submit\n  const formSubmitHandler = (data) => {\n    console.log(data);\n  };\n\n  // check unique contact name\n  //   if (contacts.find((contact) => contact.name === name)) {\n  //     return toast.error(`${name} is already in contacts`);\n  //   }\n\n  //   setContacts((prevState) => [contact, ...prevState]);\n  // };\n\n  return (\n    <>\n      <ContactsForms onSubmit={formSubmitHandler} />\n      <ToastContainer position=\"top-center\" autoClose={2000} />\n      <ContactList />\n    </>\n  );\n}\n","import React from 'react';\nimport s from '../ContactsForms/ContactsForm.module.scss';\n\nconst Container = ({ children }) => (\n  <div className={s.Container}>{children}</div>\n);\n\nexport default Container;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n// import { composeWithDevTools } from 'redux-devtools-extension'; - при установке пакета @reduxjs/toolkit' DevTools больше не нужны\n// из package.json тоже удалила\nimport { contactsReducer } from '../redux';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import { act } from 'react-dom/test-utils';\n// import storage from 'redux-persist/lib/storage';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n\n  logger,\n];\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// обертка\n// export const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Container from './components/Container/Container';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <Container>\n        <App />\n      </Container>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}